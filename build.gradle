buildscript {
    ext {
        kotlinVersion = '1.3.31'
        springBootVersion = '2.1.4.RELEASE'
        springCloudVersion = 'Finchley.RELEASE'
        springCloudAwsVersion = '2.0.1.RELEASE'
        awsSdkVersion = '1.11.500'
        jacksonJsonVersion = '2.9.8'
        nettyVersion = '4.1.36.Final'
        exposedVersion = '0.13.6'
        protobufVersion = '3.7.1'
        grpcVersion = '1.23.0'
        kotlinxCoroutineVersion = '1.2.1'
        springKotlinCoroutineVersion = '0.3.7'
        kotlinPoetVersion = '1.2.0'
        bouncycastleVersion = '1.61'
        zxcvbnVersion = '1.2.5'
        libphonenumberVersion = '8.10.11'
        mockitoVersion = '2.27.0'
        bytebuddyVersion = '1.9.12'
        junitJupiterVersion = '5.4.2'
        junitPlatformVersion = '1.5.2'
        poiVersion = '4.1.0'
        openCsvVersion = '4.6'
    }
    repositories {
        gradlePluginPortal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7")
//        classpath("com.bmuschko:gradle-docker-plugin:4.10.0")
    }
}

allprojects {
    group = "backoffice"
    version = "0.0.1-SNAPSHOT"
}

subprojects {
//    ext {
//        dockerRepo = '877918253415.dkr.ecr.ap-northeast-2.amazonaws.com'
//    }

    apply plugin: 'project-report'
    apply plugin: 'kotlin'
    apply plugin: 'kotlin-spring'
    apply plugin: 'kotlin-jpa'
    apply plugin: 'kotlin-allopen'
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'
//    apply plugin: 'com.bmuschko.docker-remote-api'

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://repo.spring.io/milestone" }
        maven { url "http://download.osgeo.org/webdav/geotools/" }
        maven { url "https://dl.bintray.com/kotlin/exposed" }
        maven { url "https://dl.bintray.com/0mok/spring-kotlin-coroutine" }
    }

    // kotlin 설정
    dependencies {
        compile("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
        compile("org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlinVersion}")
        compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
        compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
        compile("org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinxCoroutineVersion}")
        compile("org.jetbrains.kotlinx:kotlinx-coroutines-reactor:${kotlinxCoroutineVersion}")
        compile("org.bouncycastle:bcprov-jdk15on:${bouncycastleVersion}")
        compile("com.nulab-inc:zxcvbn:${zxcvbnVersion}")
        compile("com.googlecode.libphonenumber:libphonenumber:${libphonenumberVersion}")

        // KotlinTest
        // testCompile("io.kotlintest:kotlintest-runner-junit5:3.4.1")
        // testCompile("io.kotlintest:kotlintest-extensions-spring:3.3.3")

        // test
        testCompile("org.springframework.boot:spring-boot-starter-test") {
            exclude module: 'junit'
        }
        testCompile "org.junit.jupiter:junit-jupiter:${junitJupiterVersion}"
        testCompile "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
        testCompile "org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}"
//        testCompile "net.bytebuddy:byte-buddy:${bytebuddyVersion}"
//        testCompile "net.bytebuddy:byte-buddy-agent:${bytebuddyVersion}"
//        testCompile "org.mockito:mockito-core:${mockitoVersion}"
//        testCompile "org.mockito:mockito-junit-jupiter:${mockitoVersion}"

        testCompile "org.junit.platform:junit-platform-commons:${junitPlatformVersion}"
        testCompile "org.junit.platform:junit-platform-engine:${junitPlatformVersion}"

        testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-aws-dependencies:${springCloudAwsVersion}"
            mavenBom "com.amazonaws:aws-java-sdk-bom:${awsSdkVersion}"
            mavenBom "com.fasterxml.jackson:jackson-bom:${jacksonJsonVersion}"
            mavenBom "io.netty:netty-bom:${nettyVersion}"
        }

        dependencies {
            dependency("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
            dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlinVersion}")
            dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
            dependency("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
            dependency('com.google.guava:guava:26.0-jre')

//            dependency "net.bytebuddy:byte-buddy:${bytebuddyVersion}"
//            dependency "net.bytebuddy:byte-buddy-agent:${bytebuddyVersion}"
//            dependency "org.mockito:mockito-core:${mockitoVersion}"
        }
    }

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict", "-Xuse-experimental=kotlin.Experimental"]
            jvmTarget = "1.8"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict", "-Xuse-experimental=kotlin.Experimental"]
            jvmTarget = "1.8"
        }
    }

//    test {
//        useJUnitPlatform()
//        testLogging {
//            // failFast = true
//            // showStandardStreams = true
//            exceptionFormat = 'full'
//        }
//    }

    allOpen {
        annotation 'javax.persistence.Entity'
        annotation 'javax.persistence.Embeddable'
    }


//    docker {
//        registryCredentials {
//            url = 'https://index.docker.io/v1/'
//            username = System.getenv('DOCKER_HUB_ID')
//            password = System.getenv('DOCKER_HUB_PW')
//        }
//    }
}

